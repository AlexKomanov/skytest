{"version":3,"sources":["Loader/Loader.js","Table/Table.js","DetailRowView/DetailRowView.js","App.js","serviceWorker.js","index.js"],"names":["className","props","onClick","onSort","bind","sortField","sort","data","map","item","key","id","phone","onRowSelect","firstName","lastName","email","person","defaultValue","description","address","streetAddress","city","state","zip","App","isLoading","row","console","log","cloneData","concat","sortType","orderedData","_","orderBy","setState","fetch","response","json","this","Table","DetailRowView","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAGe,G,MAAA,kBAAM,yBAAKA,UAAU,oBCDrB,WAAAC,GAAK,OAChB,2BAAOD,UAAU,SACb,+BACI,4BACI,wBAAIE,QAASD,EAAME,OAAOC,KAAK,KAAM,OAArC,MAC4B,OAApBH,EAAMI,UAAqB,+BAAQ,IAAMJ,EAAMK,KAAO,KAAe,MAE7E,wBAAIJ,QAASD,EAAME,OAAOC,KAAK,KAAM,cAArC,cACoC,cAApBH,EAAMI,UAA4B,+BAAQ,IAAMJ,EAAMK,KAAO,KAAe,MAE5F,wBAAIJ,QAASD,EAAME,OAAOC,KAAK,KAAM,aAArC,aACmC,aAApBH,EAAMI,UAA2B,+BAAQ,IAAMJ,EAAMK,KAAO,KAAe,MAE1F,wBAAIJ,QAASD,EAAME,OAAOC,KAAK,KAAM,UAArC,UACgC,UAApBH,EAAMI,UAAwB,+BAAQ,IAAMJ,EAAMK,KAAO,KAAe,MAEpF,wBAAIJ,QAASD,EAAME,OAAOC,KAAK,KAAM,UAArC,SAC+B,UAApBH,EAAMI,UAAwB,+BAAQ,IAAMJ,EAAMK,KAAO,KAAe,QAI3F,+BACKL,EAAMM,KAAKC,KAAI,SAAAC,GAAI,OAChB,wBAAIC,IAAKD,EAAKE,GAAKF,EAAKG,MAAOV,QAASD,EAAMY,YAAYT,KAAK,KAAMK,IACjE,4BAAKA,EAAKE,IACV,4BAAKF,EAAKK,WACV,4BAAKL,EAAKM,UACV,4BAAKN,EAAKO,OACV,4BAAKP,EAAKG,cC5Bf,kBAAEK,EAAF,EAAEA,OAAF,OACX,6BACA,4IAAuB,2BAAIA,EAAOH,UAAY,IAAMG,EAAOF,WAC3D,gFACU,6BACV,8BAAUG,aAAcD,EAAOE,eAG/B,2HAAqB,2BAAIF,EAAOG,QAAQC,gBACxC,8DAAU,2BAAIJ,EAAOG,QAAQE,OAC7B,+GAAmB,2BAAIL,EAAOG,QAAQG,QACtC,oEAAW,2BAAIN,EAAOG,QAAQI,Q,gBCoDnBC,E,2MA1DbF,MAAO,CACLG,WAAW,EACXnB,KAAM,GACND,KAAM,MACND,UAAW,KACXsB,IAAK,M,EAaPxB,OAAS,SAAAE,GACPuB,QAAQC,IAAIxB,GACZ,IAAMyB,EAAY,EAAKP,MAAMhB,KAAKwB,SAC5BC,EAA+B,QAApB,EAAKT,MAAMjB,KAAiB,OAAS,MAChD2B,EAAcC,IAAEC,QAAQL,EAAWzB,EAAW2B,GAEpD,EAAKI,SAAS,CACZ7B,KAAM0B,EACN3B,KAAM0B,EACN3B,e,EAIJQ,YAAc,SAAAc,GAAG,OAEf,EAAKS,SAAS,CAACT,S,uLAzBQU,MAAM,2L,cAAvBC,E,0BAEaA,EAASC,Q,OAAtBhC,E,OAENiC,KAAKJ,SAAS,CACZV,WAAW,EACXnB,KAAM2B,IAAEC,QAAQ5B,EAAMiC,KAAKjB,MAAMlB,UAAWmC,KAAKjB,MAAMjB,Q,gFAuB3D,OACE,yBAAKN,UAAU,aAEXwC,KAAKjB,MAAMG,UACT,kBAAC,EAAD,MACA,kBAACe,EAAD,CACFlC,KAAMiC,KAAKjB,MAAMhB,KACjBJ,OAAQqC,KAAKrC,OACbG,KAAMkC,KAAKjB,MAAMjB,KACjBD,UAAWmC,KAAKjB,MAAMlB,UACtBQ,YAAa2B,KAAK3B,cAIlB2B,KAAKjB,MAAMI,IAAM,kBAACe,EAAD,CAAezB,OAAQuB,KAAKjB,MAAMI,MAAU,U,GApDnDgB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7c8bcb7b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.css';\r\n\r\nexport default () => <div className=\"lds-dual-ring\" />","import React from 'react';\r\n\r\nexport default props => (\r\n    <table className=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th onClick={props.onSort.bind(null, 'id')}>\r\n                    ID {props.sortField === 'id' ? <small>{'(' + props.sort + ')'}</small> : null}\r\n                </th>\r\n                <th onClick={props.onSort.bind(null, 'firstName')}>\r\n                    First Name {props.sortField === 'firstName' ? <small>{'(' + props.sort + ')'}</small> : null}\r\n                </th>\r\n                <th onClick={props.onSort.bind(null, 'lastName')}>\r\n                    Last Name {props.sortField === 'lastName' ? <small>{'(' + props.sort + ')'}</small> : null}\r\n                </th>\r\n                <th onClick={props.onSort.bind(null, 'email')}>\r\n                    E-mail {props.sortField === 'email' ? <small>{'(' + props.sort + ')'}</small> : null}\r\n                </th>\r\n                <th onClick={props.onSort.bind(null, 'phone')}>\r\n                    Phone {props.sortField === 'phone' ? <small>{'(' + props.sort + ')'}</small> : null}\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {props.data.map(item => (\r\n                <tr key={item.id + item.phone} onClick={props.onRowSelect.bind(null, item)}>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.firstName}</td>\r\n                    <td>{item.lastName}</td>\r\n                    <td>{item.email}</td>\r\n                    <td>{item.phone}</td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>\r\n) ","import React from 'react';\r\n\r\nexport default ({person}) => (\r\n    <div>\r\n    <p>Выбран пользователь <b>{person.firstName + ' ' + person.lastName}</b></p>\r\n    <p>\r\n    Описание: <br />\r\n    <textarea defaultValue={person.description} />\r\n    </p>\r\n\r\n    <p>Адрес проживания: <b>{person.address.streetAddress}</b></p>\r\n    <p>Город: <b>{person.address.city}</b></p>\r\n    <p>Провинция/штат: <b>{person.address.state}</b></p>\r\n    <p>Индекс: <b>{person.address.zip}</b></p>\r\n\r\n  </div>\r\n)","import React, { Component } from 'react';\r\nimport Loader from './Loader/Loader';\r\nimport Table from './Table/Table';\r\nimport DetailRowView from './DetailRowView/DetailRowView';\r\nimport _ from 'lodash';\r\n\r\nclass App extends Component {\r\n  state ={\r\n    isLoading: true,\r\n    data: [],\r\n    sort: 'asc',  // 'desc'\r\n    sortField: 'id', // default\r\n    row: null,\r\n  }\r\n  async componentDidMount() {\r\n    const response = await fetch(`https://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`)\r\n    //const response = await fetch(\"..download.json\")\r\n    const data = await response.json()\r\n\r\n    this.setState({\r\n      isLoading: false,\r\n      data: _.orderBy(data, this.state.sortField, this.state.sort)\r\n    })\r\n  }\r\n\r\n  onSort = sortField => {\r\n    console.log(sortField)\r\n    const cloneData = this.state.data.concat();\r\n    const sortType = this.state.sort === 'asc' ? 'desc' : 'asc';\r\n    const orderedData = _.orderBy(cloneData, sortField, sortType);\r\n\r\n    this.setState({\r\n      data: orderedData,\r\n      sort: sortType,\r\n      sortField\r\n    })\r\n  }\r\n\r\n  onRowSelect = row => (\r\n    //console.log(row),\r\n    this.setState({row})\r\n  )\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"container\">\r\n      {\r\n        this.state.isLoading \r\n        ? <Loader />\r\n        : <Table \r\n        data={this.state.data}\r\n        onSort={this.onSort}\r\n        sort={this.state.sort}\r\n        sortField={this.state.sortField}\r\n        onRowSelect={this.onRowSelect}\r\n        />\r\n      }\r\n      {\r\n        this.state.row ? <DetailRowView person={this.state.row} /> : null\r\n      }\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}